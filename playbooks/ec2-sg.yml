---
  - name: Provision an EC2 Instance
    strategy: debug
    hosts: local
    connection: local
    gather_facts: no
    vars_files:
      - ../group_vars/var_ec2-sg
    tasks:
      - name: Create a security group
        local_action: 
          module: ec2_group
          name: "{{ security_group }}"
          description: "Security Group for {{ security_group }} Servers"
          region: "{{ region }}"
          rules:
            - proto: tcp
              from_port: 80
              to_port: 80
              cidr_ip: 0.0.0.0/0
            - proto: tcp
              from_port: 8080
              to_port: 8080
              cidr_ip: 0.0.0.0/0
            - proto: tcp
              from_port: 25
              to_port: 25
              cidr_ip: 0.0.0.0/0
          rules_egress:
            - proto: all
              cidr_ip: 0.0.0.0/0
        register: ec2_group
        tags: create, create-group

      - name: Find a security group
        local_action:
          module: ec2_group_facts
          region: "{{ region }}"
          filters:
            group-name: "{{ security_group }}"
        register: ec2_group_facts
        tags: list-groups

      - name: Print security group found
        debug: var=ec2_group_facts
        when: ec2_group_facts.security_groups != []
        tags: list-groups

      - name: Terminate EC2 Instance
        local_action:
          module: ec2
          region: "{{ region }}"
          state: absent
          instance_ids: "{{ instances }}"
          wait: True
        tags: terminate      

      - name: List group instances
        local_action:
          module: ec2_remote_facts
          region: "{{ region }}"
          filters:
            instance.group-name: "{{ security_group }}"
        register: ec2_list_grps
        tags: terminate, delete-group

      - name: Delete a security group
        local_action:
          module: ec2_group
          region: "{{ region }}"
          name: "{{ security_group }}"
          state: absent
        register: ec2_group
        when: ec2_list_grps.instances == []
        tags: terminate, delete-group

      - name: Security group changed
        debug: var=ec2_group
        when: ec2_group.changed
        tags: create, create-group

      - name: Launch the new EC2 Instance
        local_action: 
          module: ec2 
          group: ["{{ security_group }}", 'vpc', 'oficina']
          instance_type: "{{ instance_type}}"
          image: "{{ image }}"
          wait: true 
          region: "{{ region }}"
          keypair: "{{ keypair }}"
          instance_profile_name: "{{ instance_profile_name }}"
          instance_tags: 
            Name: "{{ instance_tag_name }}"
            Type: "{{ instance_tag_type }}"
          count: "{{ count }}"
        register: ec2
        tags: create

      - name: Read instances
        local_action:
          module: ec2_remote_facts
          region: "{{ region }}"
          filters:
            "tag:Name": "{{ instance_tag_name }}"
            instance-state-name: ["running", "stopped"]
        register: ec2_info
        tags: list
      
      - set_fact: 
          "name": "{{ item.tags.Name }}"
          "type": "{{ item.tags.Type }}"
          "id": "{{ item.id }}"
          "image_id": "{{ item.image_id }}"
          "launch_time": "{{ item.launch_time }}"
          "private_ip_address": "{{ item.private_ip_address }}"
          "public_ip_address": "{{ item.public_ip_address }}"
          "vpc_id": "{{ item.vpc_id }}"
        with_items: "{{ ec2_info.instances }}"
        register: ec2_results
        no_log: True
        tags: list

      - set_fact:
          ec2_instances: "{{ ec2_results.results|map(attribute='ansible_facts')|list }}"
        tags: list

      - set_fact:
          ec2_instances: "{{ ec2_instances | to_nice_json }}"
        tags: list

      - name: Print instances found
        debug: var=ec2_instances
        when: ec2_info.instances != []
        tags: list

      - name: EC2 Instance launched
        debug: var=ec2.instance_ids
        when: ec2.changed
        tags: create
